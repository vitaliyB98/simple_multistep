<?php

/**
 * @file
 * Contains simple_multistep.module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function simple_multistep_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Check if form using form group multi step field.
  if (_check_form_multistep($form)) {
    $steps = _get_form_steps($form);
    if (!empty($form_state->get('step'))) {
      $current_step = $form_state->get('step');
    }
    else {
      $current_step = 0;
      $form_state->set('step', 0);
    }

    // Show next button.
    if (count($steps) - 1 != $current_step) {
      $form['actions']['next'] = array(
        '#type' => 'button',
        '#value' => t('Next'),
        '#validate' => array('simple_multistep_register_next_step'),
        '#submit' => array(),
      );
      $form['actions']['submit']['#access'] = FALSE;
    }
    // On last step hide next button and show save button.
    else {
      $form['actions']['submit']['#access'] = TRUE;
      $form['#validate'][] = 'simple_multistep_multistep_validate';
    }

    $step_settings = _get_step_settings($form, $current_step);
    if (isset($step_settings->format_settings)) {
      $step_format_settings = $step_settings->format_settings;

      // Show back button.
      if ($current_step != 0 && isset($step_format_settings['back_button_show'])
        && $step_format_settings['back_button_show']) {
        // Add back button and remove validation.
        $form['actions']['back_button'] = array(
          '#type' => 'button',
          '#value' => t('Back'),
          '#validate' => array('simple_multistep_register_back'),
          '#submit' => array(),
          '#limit_validation_errors' => array(),
        );
      }
    }

    // Hide form field from another step.
    _set_access_for_form_field($form, $steps, $current_step);
  }
}

/**
 * Get array with form steps.
 *
 * @param array $form
 *   Form settings.
 *
 * @return array
 *   Return steps.
 */
function _get_form_steps(array $form) {
  $steps = array();

  if (isset($form['#fieldgroups']) && is_array($form['#fieldgroups'])) {
    foreach ($form['#fieldgroups'] as $field_group) {
      if ($field_group->format_type == 'form_step') {
        $steps[] = $field_group;
      }
    }
    usort($steps, '_sort_objects_by_weight');
  }

  return $steps;
}

/**
 * Sort array by object property.
 *
 * @param object $first_object
 *   First object.
 * @param object $second_object
 *   Second object.
 *
 * @return int
 *   Indicator.
 */
function _sort_objects_by_weight($first_object, $second_object) {
  if ($first_object->weight == $second_object->weight) {
    return 0;
  }
  return ($first_object->weight < $second_object->weight) ? -1 : 1;
}

/**
 * Set access for form field.
 */
function _set_access_for_form_field(&$form, $steps, $current_step) {
  unset($form['actions']['next']['#limit_validation_errors']);
  foreach ($steps as $key => $step) {
    $children = $step->children;
    if (!empty($children)) {
      // Another step.
      if ($key != $current_step) {
        foreach ($children as $form_element) {
          if (isset($form[$form_element])) {
            $form[$form_element]['#access'] = FALSE;

            if (isset($form[$form_element]['widget']['#required']) &&
              $form[$form_element]['widget']['#required'] == TRUE) {
            }
          }
        }
      }
    }
  }

  // Last step.
  if ($current_step == count($steps) - 1) {
    foreach ($form as $element_key => $form_element) {
      if (is_array($form_element) && isset($form_element['#type'])) {
        unset($form['actions']['submit']['#limit_validation_errors']);
        if (isset($form['actions']['next']['#limit_validation_errors'])) {
          unset($form['actions']['next']['#limit_validation_errors']);
        }
      }
    }
  }

  // White list for validation.
  $white_list = _get_whitelist_for_validation($form, $current_step);
  if (!empty($white_list)) {
    foreach ($white_list as $form_element) {
      $form['actions']['next']['#limit_validation_errors'][] = array($form_element);
    }
  }
}

/**
 * Check if valid multistep form.
 */
function _check_form_multistep($form) {
  if (isset($form['#fieldgroups']) && !empty($form['#fieldgroups'])) {
    foreach ($form['#fieldgroups'] as $fieldgroup) {
      if (is_object($fieldgroup) && $fieldgroup->format_type == 'form_step') {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Get form step settings by step.
 *
 * @param array $form
 *   Form settings.
 * @param int $step
 *   Number of step.
 *
 * @return array
 *   Array with form step settings.
 */
function _get_step_settings(array $form, $step) {
  $step_settings = array();
  if (isset($form['#fieldgroups'])) {
    $form_steps = _get_form_steps($form);

    if (!empty($form_steps) && isset($form_steps[$step])) {
      $step_settings = $form_steps[$step];
    }
  }

  return $step_settings;
}

/**
 * Validator handler for next button.
 */
function simple_multistep_register_next_step(&$form, FormStateInterface $form_state) {
  $current_step = $form_state->get('step');

  $steps = _get_form_steps($form);
  if (count($steps) - 1 > $current_step) {
    $current_step++;
    $form_state->set('step', $current_step);
    $form_state->setRebuild();
  }

  $full_user_input = $form_state->get('full_values');
  $current_user_input = $form_state->getValues();
  if (is_array($full_user_input)) {
    $current_user_input = array_merge($full_user_input, $current_user_input);
  }
  $form_state->set('full_values', $current_user_input);
}

/**
 * Validator handler for back button.
 */
function simple_multistep_register_back(&$form, FormStateInterface $form_state) {
  $current_step = $form_state->get('step');

  // If current_step more than 0.
  if ($current_step) {
    $current_step--;
    $form_state->set('step', $current_step);
    $form_state->setRebuild();
  }

}

/**
 * Validation handler.
 */
function simple_multistep_multistep_validate(&$form, FormStateInterface &$form_state) {
  $full_user_input = $form_state->get('full_values');
  $current_user_input = $form_state->getValues();
  if (is_array($full_user_input)) {
    $current_user_input = array_merge($current_user_input, $full_user_input);
  }

  foreach ($current_user_input as $name => $value) {
    if (isset($form[$name]) && is_array($form[$name])) {
      $form_state->setValue($name, $value);
    }
  }
}

/**
 * Get whitelist for validation.
 *
 * @param array $form
 *   Form settings.
 * @param int $current_step
 *   Current step number.
 *
 * @return array
 *   List of whitelist.
 */
function _get_whitelist_for_validation(array $form, $current_step) {
  $white_list = array();
  foreach ($form as $element_key => $form_element) {
    if (is_array($form_element) && isset($form_element['#type'])) {
      $white_list[] = $element_key;
    }
  }

  $white_list = _remove_pending_field($form, $white_list, $current_step);
  return $white_list;
}

/**
 * Remove pending field from whitelist.
 *
 * @param array $form
 *   Form settings.
 * @param array $field_list
 *   Field list.
 * @param int $current_step
 *   Curent step.
 *
 * @return array
 *   Filtered array.
 */
function _remove_pending_field(array $form, array $field_list, $current_step) {
  $steps = _get_form_steps($form);
  foreach ($steps as $step_number => $step) {
    if ($step_number > $current_step && isset($step->children)) {
      $children = $step->children;

      if (!empty($children)) {
        foreach ($children as $child) {
          if (($key = array_search($child, $field_list)) !== FALSE) {
            unset($field_list[$key]);
          }
        }
      }
    }
  }

  return $field_list;
}
